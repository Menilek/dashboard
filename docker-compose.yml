version: "3.8"

services:
  # traefik:
  #   image: traefik:v2.4
  #   container_name: traefik
  #   restart: unless-stopped
  #   security_opt:
  #     - no-new-privileges:true
  #   networks:
  #     - ipApp
  #   ports:
  #     - 80:80
  #     - 443:443
  #     # - 8080:8080
  #   volumes:
  #     - /etc/localtime:/etc/localtime:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - ./traefik.yml:/traefik.yml:ro
  #     - ./letsencrypt/acme.json:/acme.json
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.docker.network=ipApp"
  #     - "traefik.http.routers.traefik.entrypoints=http"
  #     # - "traefik.http.routers.traefik.rule=Host(`localhost`)"
  #     - "traefik.http.routers.traefik.rule=Host(`menilek.tech`)"
  #     - "traefik.http.middlewares.traefik-https-redirect.redirectscheme.scheme=https"
  #     - "traefik.http.routers.traefik.middlewares=traefik-https-redirect"
  #     - "traefik.http.routers.traefik-secure.entrypoints=https"
  #     - "traefik.http.routers.traefik-secure.rule=Host(`menilek.tech`)"
  #     - "traefik.http.routers.traefik-secure.tls=true"
  #     - "traefik.http.routers.traefik-secure.tls.certresolver=http"
  #     - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
  #     - "--certificatesresolvers.myresolver.acme.email=menilek25@hotmail.co.uk"
  #     - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
  # db:
  #   environment:
  #     POSTGRES_USER: ${USER}
  #     POSTGRES_PASSWORD: ${PASSWORD}
  #     POSTGRES_DB: ${DB}
  #   image: postgres:latest
  #   ports:
  #     - "${POSTGRES_PORT}:5432"
  #   restart: always
  #   volumes:
  #     - ./postgres-data:/var/lib/postgresql/data
  #   networks:
  #     - ipApp

  # backend:
  #   build:
  #     context: "./backend"
  #     dockerfile: Dockerfile
  #   environment:
  #     POSTGRES_USER: ${USER}
  #     POSTGRES_PASSWORD: ${PASSWORD}
  #     POSTGRES_DB: "db"
  #     APPLICATION_DB: ${APPLICATION_DB}
  #     POSTGRES_PORT: ${POSTGRES_PORT}
  #   hostname: backend
  #   ports:
  #     - "5000:5000"
  #   volumes:
  #     - ./backend:/usr/src/backend
  #   depends_on:
  #     - db
  #   tty: true
  #   networks:
  #     - ipApp

  amharic:
    build:
      context: "./backend/AmharicAPI"
      dockerfile: Dockerfile
    hostname: amharic
    ports:
      - "3001:3001"
    volumes:
      - ./backend/AmharicAPI:/usr/src/amharic
    restart: unless-stopped
    networks:
      - ipApp

  frontend:
    build:
      context: "./frontend"
      dockerfile: Dockerfile
    ports:
      - 80:80
    environment:
      BACKEND_BUILD_TIME_URL: amharic
    volumes:
      - ./frontend:/usr/src/frontend
      # - /etc/localtime:/etc/localtime:ro
      # - /var/run/docker.sock:/var/run/docker.sock:ro
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.frontend.entrypoints=http"
    #   # - "traefik.http.routers.frontend.rule=Host(`frontend.localhost`)"
    #   - "traefik.http.routers.frontend.rule=Host(`frontend.menilek.tech`)"
    #   - "traefik.http.middlewares.frontend-https-redirect.redirectscheme.scheme=https"
    #   - "traefik.http.routers.frontend.middlewares=frontend-https-redirect"
    #   - "traefik.http.services.frontend.loadbalancer.server.port=80"
    #   - "traefik.docker.network=ipApp"
    #   - "traefik.port=80"
    depends_on:
      - amharic
    networks:
      - ipApp

networks:
  ipApp:
    driver: bridge
    external: true
#  docker-compose up --build -d
#  docker-compose exec backend python manage.py create_db
#  docker-compose exec backend python ./manage.py db psql -U menilek
#  docker-compose build --no-cache
#  docker-compose up -d
#  docker-compose up --force-recreate
#  docker-compose down -v --rmi local
